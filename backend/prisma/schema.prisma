generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    BigInt              @id @default(autoincrement())
  username              String              @unique
  email                 String              @unique
  password_hash         String
  full_name             String?
  work_history          String?
  skills                String?
  profile_photo_path    String?
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @updatedAt @db.Timestamptz(6)
  ChatFrom              Chat[]              @relation("ChatFrom")
  ChatTo                Chat[]              @relation("ChatTo")
  ConnectionFrom        Connection[]        @relation("ConnectionFrom")
  ConnectionTo          Connection[]        @relation("ConnectionTo")
  ConnectionRequestFrom ConnectionRequest[] @relation("ConnectionRequestFrom")
  ConnectionRequestTo   ConnectionRequest[] @relation("ConnectionRequestTo")
  Feed                  Feed[]
  PushSubscription      PushSubscription[]
}

model Feed {
  id         BigInt   @id @default(autoincrement())
  content    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
  user_id    BigInt
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Chat {
  id        BigInt   @id @default(autoincrement())
  timestamp DateTime @default(now()) @db.Timestamptz(6)
  from_id   BigInt
  to_id     BigInt
  message   String
  From      User     @relation("ChatFrom", fields: [from_id], references: [id], onDelete: Cascade)
  To        User     @relation("ChatTo", fields: [to_id], references: [id], onDelete: Cascade)

  @@index([from_id, to_id])
}

model ConnectionRequest {
  from_id    BigInt
  to_id      BigInt
  created_at DateTime
  From       User     @relation("ConnectionRequestFrom", fields: [from_id], references: [id], onDelete: Cascade)
  To         User     @relation("ConnectionRequestTo", fields: [to_id], references: [id], onDelete: Cascade)

  @@id([from_id, to_id])
}

model Connection {
  from_id    BigInt
  to_id      BigInt
  created_at DateTime
  From       User     @relation("ConnectionFrom", fields: [from_id], references: [id], onDelete: Cascade)
  To         User     @relation("ConnectionTo", fields: [to_id], references: [id], onDelete: Cascade)

  @@id([from_id, to_id])
}

model PushSubscription {
  endpoint   String   @id
  user_id    BigInt?
  keys       Json
  created_at DateTime @default(now()) @db.Timestamptz(6)
  User       User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
}
